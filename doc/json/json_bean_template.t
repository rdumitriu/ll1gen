//
// GENERATED by ll1gen : Do not modify (or on your own risk)
//
#ifndef _LL1GEN_$BEANNAME$_HPP_
#define _LL1GEN_$BEANNAME$_HPP_

#include "json_utils.hpp"

//ll1gen::include_begin

//ll1gen::include_end

$namespace_def_begin$

class $BeanName$ {
public:
    //ll1gen::constructor_begin

    //ll1gen::constructor_end
    $BeanName$() {}
    ~$BeanName$() {}

#ifndef LL1GEN_DISABLE_STANDARD_GETTERS
    //ll1gen::getters_begin

    //ll1gen::getters_end
#endif

#ifndef LL1GEN_DISABLE_REFERENCE_GETTERS
    //ll1gen::ref_getters_begin

    //ll1gen::ref_getters_end
#endif

    friend std::ostream& operator<< (std::ostream& __stream, const $BeanName$& __bean);
    friend std::istream& operator>> (std::istream& __stream, $BeanName$& __bean);
private:
    //ll1gen::field_decl_begin

    //ll1gen::field_decl_end
};

std::ostream& operator<< (std::ostream& __stream, const $BeanName$& __bean) {
    __stream << "{";
    //ll1gen::field_ostream_begin

    //ll1gen::field_ostream_end
    __stream << "}";
    return __stream;
}

std::istream& operator>> (std::istream& __stream, $BeanName$& __bean) {
    char __startObjectMrk = ll1gen::json::lookUpAndEat(__stream, "{n");
    if(__startObjectMrk == 'n') {
        ll1gen::json::lookUpTokenRemainder(__stream, __startObjectMrk, "null");
        return __stream;
    }
    for(unsigned int __i = 0; __i < $bean_number_of_fields$; ++__i) {
        ll1gen::json::lookUpAndEat(__stream, "\"");
        std::string __propertyName = ll1gen::json::lookUp(__stream, "\"");
        ll1gen::json::lookUpAndEat(__stream, ":");

        //ll1gen::field_istream_begin

        //ll1gen::field_istream_end

        if('{' == ll1gen::json::lookUpAndEat(__stream, "},")) {
            break;
        }
    }
    return __stream;
}

$namespace_def_end$

#endif
