//
// GENERATED by ll1gen : Do not modify (or on your own risk)
//
#ifndef _LL1GEN_$BEANNAME$_HPP_
#define _LL1GEN_$BEANNAME$_HPP_

#include "json_utils.hpp"

//ll1gen::include_begin

//ll1gen::include_end

$namespace_def_begin$

class $BeanName$ {
public:
    //ll1gen::constructor_begin
    $BeanName$(
    		//ll1gen::constructor_param
              ) :
    		//ll1gen::constructor_assign
		{}
    //ll1gen::constructor_begin

    //ll1gen::copy_constructor_begin
    $BeanName$(const $BeanName$ & __bean) :
    		//ll1gen::copy_constructor_assign
		{}
    //ll1gen::copy_constructor_end

    $BeanName$() {}
    virtual ~$BeanName$() {}

    //ll1gen::getters_begin

    //ll1gen::getters_end

    $BeanName$ & operator = (const $BeanName$ & __bean) {
        if(this != &__bean) {
    		//ll1gen::opeq_assign
        }
        return (*this);
    }

    friend std::ostream& operator<< (std::ostream& __stream, const $BeanName$& __bean);
    friend std::istream& operator>> (std::istream& __stream, $BeanName$& __bean);
private:
    //ll1gen::field_decl_begin

    //ll1gen::field_decl_end
};

inline std::ostream& operator<< (std::ostream& __stream, const $BeanName$& __bean) {
    __stream << "{";
    //ll1gen::field_ostream_begin

    //ll1gen::field_ostream_end
    __stream << "}";
    return __stream;
}

inline std::istream& operator>> (std::istream& __stream, $BeanName$& __bean) {
    char __startObjectMrk = ll1gen::json::detail::lookUpAndEat(__stream, "{n");
    if(__startObjectMrk == 'n') {
        ll1gen::json::detail::lookUpTokenRemainder(__stream, __startObjectMrk, "null");
        return __stream;
    }
    for(unsigned int __i = 0; __i < $bean_number_of_fields$; ++__i) {
        ll1gen::json::detail::lookUpAndEat(__stream, "\"");
        std::string __propertyName = ll1gen::json::detail::lookUp(__stream, "\"");
        ll1gen::json::detail::lookUpAndEat(__stream, ":");

        //ll1gen::field_istream_begin

        //ll1gen::field_istream_end

        if('}' == ll1gen::json::detail::lookUpAndEat(__stream, "},")) {
            break;
        }
    }
    return __stream;
}

$namespace_def_end$

#endif
