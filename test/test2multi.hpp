//
// GENERATED by ll1gen : Do not modify (or on your own risk)
//
#ifndef _LL1GEN_TEST2MULTI_HPP_
#define _LL1GEN_TEST2MULTI_HPP_

#include "json_utils.hpp"

//ll1gen::include_begin

#include "test2simple.hpp"
//ll1gen::include_end

namespace test { 

class Test2Multi {
public:
    //ll1gen::constructor_begin
    Test2Multi(
    		    const std::vector<bool>  & __multiBool

,
    const std::vector<std::string>  & __multiString

,
    const std::vector<int>  & __multiInt

,
    const std::vector<Test2Simple>  & __multiObj

//ll1gen::constructor_param
              ) :
    		    _multiBool(__multiBool)

,
    _multiString(__multiString)

,
    _multiInt(__multiInt)

,
    _multiObj(__multiObj)

//ll1gen::constructor_assign
		{}
    //ll1gen::constructor_begin

    //ll1gen::copy_constructor_begin
    Test2Multi(const Test2Multi & __bean) :
    		    _multiBool(__bean._multiBool)

,
    _multiString(__bean._multiString)

,
    _multiInt(__bean._multiInt)

,
    _multiObj(__bean._multiObj)

//ll1gen::copy_constructor_assign
		{}
    //ll1gen::copy_constructor_end

    Test2Multi() {}
    virtual ~Test2Multi() {}

    //ll1gen::getters_begin

    
    inline
    const std::vector<bool>  & getMultiBool() const { return _multiBool; }

    inline
    void setMultiBool( const std::vector<bool>  & __val) { _multiBool = __val; }



    inline
    const std::vector<std::string>  & getMultiString() const { return _multiString; }

    inline
    void setMultiString( const std::vector<std::string>  & __val) { _multiString = __val; }



    inline
    const std::vector<int>  & getMultiInt() const { return _multiInt; }

    inline
    void setMultiInt( const std::vector<int>  & __val) { _multiInt = __val; }



    inline
    const std::vector<Test2Simple>  & getMultiObj() const { return _multiObj; }

    inline
    void setMultiObj( const std::vector<Test2Simple>  & __val) { _multiObj = __val; }


//ll1gen::getters_end

    Test2Multi & operator = (const Test2Multi & __bean) {
        if(this != &__bean) {
    		    this->_multiBool = __bean._multiBool;

    this->_multiString = __bean._multiString;

    this->_multiInt = __bean._multiInt;

    this->_multiObj = __bean._multiObj;

//ll1gen::opeq_assign
        }
        return (*this);
    }

    friend std::ostream& operator<< (std::ostream& __stream, const Test2Multi& __bean);
    friend std::istream& operator>> (std::istream& __stream, Test2Multi& __bean);
private:
    //ll1gen::field_decl_begin

    std::vector<bool>  _multiBool;
std::vector<std::string>  _multiString;
std::vector<int>  _multiInt;
std::vector<Test2Simple>  _multiObj;
//ll1gen::field_decl_end
};

inline std::ostream& operator<< (std::ostream& __stream, const Test2Multi& __bean) {
    __stream << "{";
    //ll1gen::field_ostream_begin

        __stream << "\"multiBool\":";
    ll1gen::json::serializeVector(__stream, __bean._multiBool);


__stream << ",";
    __stream << "\"multiString\":";
    ll1gen::json::serializeVector(__stream, __bean._multiString);


__stream << ",";
    __stream << "\"multiInt\":";
    ll1gen::json::serializeVector(__stream, __bean._multiInt);


__stream << ",";
    __stream << "\"multiObj\":";
    ll1gen::json::serializeVector(__stream, __bean._multiObj);


//ll1gen::field_ostream_end
    __stream << "}";
    return __stream;
}

inline std::istream& operator>> (std::istream& __stream, Test2Multi& __bean) {
    char __startObjectMrk = ll1gen::json::detail::lookUpAndEat(__stream, "{n");
    if(__startObjectMrk == 'n') {
        ll1gen::json::detail::lookUpTokenRemainder(__stream, __startObjectMrk, "null");
        return __stream;
    }
    for(unsigned int __i = 0; __i < 4; ++__i) {
        ll1gen::json::detail::lookUpAndEat(__stream, "\"");
        std::string __propertyName = ll1gen::json::detail::lookUp(__stream, "\"");
        ll1gen::json::detail::lookUpAndEat(__stream, ":");

        //ll1gen::field_istream_begin

            
    if(__propertyName == "multiBool") {
        ll1gen::json::deserializeVector(__stream, __bean._multiBool);
    }

else
    
    if(__propertyName == "multiString") {
        ll1gen::json::deserializeVector(__stream, __bean._multiString);
    }

else
    
    if(__propertyName == "multiInt") {
        ll1gen::json::deserializeVector(__stream, __bean._multiInt);
    }

else
    
    if(__propertyName == "multiObj") {
        ll1gen::json::deserializeVector(__stream, __bean._multiObj);
    }

//ll1gen::field_istream_end

        if('}' == ll1gen::json::detail::lookUpAndEat(__stream, "},")) {
            break;
        }
    }
    return __stream;
}

} 

#endif
