//
// GENERATED by ll1gen : Do not modify (or on your own risk)
//
#ifndef _LL1GEN_GLOSSARYDEFINITION_HPP_
#define _LL1GEN_GLOSSARYDEFINITION_HPP_

#include "json_utils.hpp"

//ll1gen::include_begin

//ll1gen::include_end

namespace test { namespace glossary { 

class GlossaryDefinition {
public:
    //ll1gen::constructor_begin

    //ll1gen::constructor_end
    GlossaryDefinition() {}
    ~GlossaryDefinition() {}

#ifndef LL1GEN_DISABLE_STANDARD_GETTERS
    //ll1gen::getters_begin

    
    std::string get_para() const { return _para; }

    void set_para( const std::string & __val) { _para = __val; }



    std::vector<std::string>  get_GlossSeeAlso() const { return _GlossSeeAlso; }

    void set_GlossSeeAlso( const std::vector<std::string>  & __val) { _GlossSeeAlso = __val; }


//ll1gen::getters_end
#endif

#ifndef LL1GEN_DISABLE_REFERENCE_GETTERS
    //ll1gen::ref_getters_begin

        std::string & para() { return _para; }


    std::vector<std::string>  & GlossSeeAlso() { return _GlossSeeAlso; }


//ll1gen::ref_getters_end
#endif

    friend std::ostream& operator<< (std::ostream& __stream, const GlossaryDefinition& __bean);
    friend std::istream& operator>> (std::istream& __stream, GlossaryDefinition& __bean);
private:
    //ll1gen::field_decl_begin

    std::string _para;
std::vector<std::string>  _GlossSeeAlso;
//ll1gen::field_decl_end
};

std::ostream& operator<< (std::ostream& __stream, const GlossaryDefinition& __bean) {
    __stream << "{";
    //ll1gen::field_ostream_begin

        __stream << "\"para\":\"" << ll1gen::json::detail::encodeJsonString(__bean._para) << "\"";


__stream << ",";
    __stream << "\"GlossSeeAlso\":";
    ll1gen::json::serializeVector(__stream, __bean._GlossSeeAlso);


//ll1gen::field_ostream_end
    __stream << "}";
    return __stream;
}

std::istream& operator>> (std::istream& __stream, GlossaryDefinition& __bean) {
    char __startObjectMrk = ll1gen::json::detail::lookUpAndEat(__stream, "{n");
    if(__startObjectMrk == 'n') {
        ll1gen::json::detail::lookUpTokenRemainder(__stream, __startObjectMrk, "null");
        return __stream;
    }
    for(unsigned int __i = 0; __i < 2; ++__i) {
        ll1gen::json::detail::lookUpAndEat(__stream, "\"");
        std::string __propertyName = ll1gen::json::detail::lookUp(__stream, "\"");
        ll1gen::json::detail::lookUpAndEat(__stream, ":");

        //ll1gen::field_istream_begin

            if(__propertyName == "para") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._para)) {
            throw new std::runtime_error("JSON: null not supported for field para (string). Check definition.");
        }
    }

else
    
    if(__propertyName == "GlossSeeAlso") {
        ll1gen::json::deserializeVector(__stream, __bean._GlossSeeAlso);
    }

//ll1gen::field_istream_end

        if('}' == ll1gen::json::detail::lookUpAndEat(__stream, "},")) {
            break;
        }
    }
    return __stream;
}

} } 

#endif
