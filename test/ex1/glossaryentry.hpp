//
// GENERATED by ll1gen : Do not modify (or on your own risk)
//
#ifndef _LL1GEN_GLOSSARYENTRY_HPP_
#define _LL1GEN_GLOSSARYENTRY_HPP_

#include "json_utils.hpp"

//ll1gen::include_begin

#include "glossarydefinition.hpp"
//ll1gen::include_end

namespace test { namespace glossary { 

class GlossaryEntry {
public:
    //ll1gen::constructor_begin

    //ll1gen::constructor_end
    GlossaryEntry() {}
    ~GlossaryEntry() {}

#ifndef LL1GEN_DISABLE_STANDARD_GETTERS
    //ll1gen::getters_begin

    
    std::string get_ID() const { return _ID; }

    void set_ID( const std::string & __val) { _ID = __val; }



    std::string get_SortAs() const { return _SortAs; }

    void set_SortAs( const std::string & __val) { _SortAs = __val; }



    std::string get_GlossTerm() const { return _GlossTerm; }

    void set_GlossTerm( const std::string & __val) { _GlossTerm = __val; }



    std::string get_Acronym() const { return _Acronym; }

    void set_Acronym( const std::string & __val) { _Acronym = __val; }



    std::string get_Abbrev() const { return _Abbrev; }

    void set_Abbrev( const std::string & __val) { _Abbrev = __val; }



    GlossaryDefinition get_GlossDef() const { return _GlossDef; }

    void set_GlossDef( const GlossaryDefinition & __val) { _GlossDef = __val; }



    std::string get_GlossSee() const { return _GlossSee; }

    void set_GlossSee( const std::string & __val) { _GlossSee = __val; }


//ll1gen::getters_end
#endif

#ifndef LL1GEN_DISABLE_REFERENCE_GETTERS
    //ll1gen::ref_getters_begin

        std::string & ID() { return _ID; }


    std::string & SortAs() { return _SortAs; }


    std::string & GlossTerm() { return _GlossTerm; }


    std::string & Acronym() { return _Acronym; }


    std::string & Abbrev() { return _Abbrev; }


    GlossaryDefinition & GlossDef() { return _GlossDef; }


    std::string & GlossSee() { return _GlossSee; }


//ll1gen::ref_getters_end
#endif

    friend std::ostream& operator<< (std::ostream& __stream, const GlossaryEntry& __bean);
    friend std::istream& operator>> (std::istream& __stream, GlossaryEntry& __bean);
private:
    //ll1gen::field_decl_begin

    std::string _ID;
std::string _SortAs;
std::string _GlossTerm;
std::string _Acronym;
std::string _Abbrev;
GlossaryDefinition _GlossDef;
std::string _GlossSee;
//ll1gen::field_decl_end
};

std::ostream& operator<< (std::ostream& __stream, const GlossaryEntry& __bean) {
    __stream << "{";
    //ll1gen::field_ostream_begin

        __stream << "\"ID\":\"" << ll1gen::json::detail::encodeJsonString(__bean._ID) << "\"";


__stream << ",";
    __stream << "\"SortAs\":\"" << ll1gen::json::detail::encodeJsonString(__bean._SortAs) << "\"";


__stream << ",";
    __stream << "\"GlossTerm\":\"" << ll1gen::json::detail::encodeJsonString(__bean._GlossTerm) << "\"";


__stream << ",";
    __stream << "\"Acronym\":\"" << ll1gen::json::detail::encodeJsonString(__bean._Acronym) << "\"";


__stream << ",";
    __stream << "\"Abbrev\":\"" << ll1gen::json::detail::encodeJsonString(__bean._Abbrev) << "\"";


__stream << ",";
    __stream << "\"GlossDef\":" << __bean._GlossDef;


__stream << ",";
    __stream << "\"GlossSee\":\"" << ll1gen::json::detail::encodeJsonString(__bean._GlossSee) << "\"";


//ll1gen::field_ostream_end
    __stream << "}";
    return __stream;
}

std::istream& operator>> (std::istream& __stream, GlossaryEntry& __bean) {
    char __startObjectMrk = ll1gen::json::detail::lookUpAndEat(__stream, "{n");
    if(__startObjectMrk == 'n') {
        ll1gen::json::detail::lookUpTokenRemainder(__stream, __startObjectMrk, "null");
        return __stream;
    }
    for(unsigned int __i = 0; __i < 7; ++__i) {
        ll1gen::json::detail::lookUpAndEat(__stream, "\"");
        std::string __propertyName = ll1gen::json::detail::lookUp(__stream, "\"");
        ll1gen::json::detail::lookUpAndEat(__stream, ":");

        //ll1gen::field_istream_begin

            if(__propertyName == "ID") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._ID)) {
            throw new std::runtime_error("JSON: null not supported for field ID (string). Check definition.");
        }
    }

else
    if(__propertyName == "SortAs") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._SortAs)) {
            throw new std::runtime_error("JSON: null not supported for field SortAs (string). Check definition.");
        }
    }

else
    if(__propertyName == "GlossTerm") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._GlossTerm)) {
            throw new std::runtime_error("JSON: null not supported for field GlossTerm (string). Check definition.");
        }
    }

else
    if(__propertyName == "Acronym") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._Acronym)) {
            throw new std::runtime_error("JSON: null not supported for field Acronym (string). Check definition.");
        }
    }

else
    if(__propertyName == "Abbrev") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._Abbrev)) {
            throw new std::runtime_error("JSON: null not supported for field Abbrev (string). Check definition.");
        }
    }

else
    if(__propertyName == "GlossDef") {
        if(!ll1gen::json::detail::lookUpNull(__stream)) {
            __stream >> __bean._GlossDef;
        } else {
            throw std::runtime_error("JSON: null not supported for field GlossDef. Check definition");
        }
    }

else
    if(__propertyName == "GlossSee") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._GlossSee)) {
            throw new std::runtime_error("JSON: null not supported for field GlossSee (string). Check definition.");
        }
    }

//ll1gen::field_istream_end

        if('}' == ll1gen::json::detail::lookUpAndEat(__stream, "},")) {
            break;
        }
    }
    return __stream;
}

} } 

#endif
