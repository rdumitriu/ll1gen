//
// GENERATED by ll1gen : Do not modify (or on your own risk)
//
#ifndef _LL1GEN_SCORE_HPP_
#define _LL1GEN_SCORE_HPP_

#include "json_utils.hpp"

//ll1gen::include_begin

//ll1gen::include_end

namespace test { namespace gamer { 

class Score {
public:
    //ll1gen::constructor_begin
    Score(
    		     unsigned int  __coins

,
     unsigned int  __mana

//ll1gen::constructor_param
              ) :
    		    _coins(__coins)

,
    _mana(__mana)

//ll1gen::constructor_assign
		{}
    //ll1gen::constructor_begin

    //ll1gen::copy_constructor_begin
    Score(const Score & __bean) :
    		    _coins(__bean._coins)

,
    _mana(__bean._mana)

//ll1gen::copy_constructor_assign
		{}
    //ll1gen::copy_constructor_end

    Score() {}
    virtual ~Score() {}

    //ll1gen::getters_begin

    
    const unsigned int & getCoins() const { return _coins; }

    void setCoins(  unsigned int  __val) { _coins = __val; }



    const unsigned int & getMana() const { return _mana; }

    void setMana(  unsigned int  __val) { _mana = __val; }


//ll1gen::getters_end

    Score & operator = (const Score & __bean) {
        if(this != &__bean) {
    		    this->_coins = __bean._coins;

    this->_mana = __bean._mana;

//ll1gen::opeq_assign
        }
        return (*this);
    }

    friend std::ostream& operator<< (std::ostream& __stream, const Score& __bean);
    friend std::istream& operator>> (std::istream& __stream, Score& __bean);
private:
    //ll1gen::field_decl_begin

    unsigned int _coins;
unsigned int _mana;
//ll1gen::field_decl_end
};

std::ostream& operator<< (std::ostream& __stream, const Score& __bean) {
    __stream << "{";
    //ll1gen::field_ostream_begin

        __stream << "\"coins\":" << __bean._coins;


__stream << ",";
    __stream << "\"mana\":" << __bean._mana;


//ll1gen::field_ostream_end
    __stream << "}";
    return __stream;
}

std::istream& operator>> (std::istream& __stream, Score& __bean) {
    char __startObjectMrk = ll1gen::json::detail::lookUpAndEat(__stream, "{n");
    if(__startObjectMrk == 'n') {
        ll1gen::json::detail::lookUpTokenRemainder(__stream, __startObjectMrk, "null");
        return __stream;
    }
    for(unsigned int __i = 0; __i < 2; ++__i) {
        ll1gen::json::detail::lookUpAndEat(__stream, "\"");
        std::string __propertyName = ll1gen::json::detail::lookUp(__stream, "\"");
        ll1gen::json::detail::lookUpAndEat(__stream, ":");

        //ll1gen::field_istream_begin

            if(__propertyName == "coins") {
        if(!ll1gen::json::detail::lookUpNull(__stream)) {
            __stream >> __bean._coins;
        } else {
            throw std::runtime_error("JSON: null not supported for field coins. Check definition");
        }
    }

else
    if(__propertyName == "mana") {
        if(!ll1gen::json::detail::lookUpNull(__stream)) {
            __stream >> __bean._mana;
        } else {
            throw std::runtime_error("JSON: null not supported for field mana. Check definition");
        }
    }

//ll1gen::field_istream_end

        if('}' == ll1gen::json::detail::lookUpAndEat(__stream, "},")) {
            break;
        }
    }
    return __stream;
}

} } 

#endif
