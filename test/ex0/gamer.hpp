//
// GENERATED by ll1gen : Do not modify (or on your own risk)
//
#ifndef _LL1GEN_GAMER_HPP_
#define _LL1GEN_GAMER_HPP_

#include "json_utils.hpp"

//ll1gen::include_begin

#include "score.hpp"
#include "weapon.hpp"
//ll1gen::include_end

namespace test { namespace gamer { 

class Gamer {
public:
    //ll1gen::constructor_begin

    //ll1gen::constructor_end
    Gamer() {}
    ~Gamer() {}

#ifndef LL1GEN_DISABLE_STANDARD_GETTERS
    //ll1gen::getters_begin

    
    std::string get_name() const { return _name; }

    void set_name( const std::string & __val) { _name = __val; }



    unsigned int get_age() const { return _age; }

    void set_age(  unsigned int  __val) { _age = __val; }



    std::shared_ptr<Weapon>  get_weapon() const { return _weapon; }

    void set_weapon(  std::shared_ptr<Weapon>   __val) { _weapon = __val; }



    Score get_score() const { return _score; }

    void set_score( const Score & __val) { _score = __val; }


//ll1gen::getters_end
#endif

#ifndef LL1GEN_DISABLE_REFERENCE_GETTERS
    //ll1gen::ref_getters_begin

        std::string & name() { return _name; }


    unsigned int & age() { return _age; }


    std::shared_ptr<Weapon>  & weapon() { return _weapon; }


    Score & score() { return _score; }


//ll1gen::ref_getters_end
#endif

    friend std::ostream& operator<< (std::ostream& __stream, const Gamer& __bean);
    friend std::istream& operator>> (std::istream& __stream, Gamer& __bean);
private:
    //ll1gen::field_decl_begin

    std::string _name;
unsigned int _age;
std::shared_ptr<Weapon>  _weapon;
Score _score;
//ll1gen::field_decl_end
};

std::ostream& operator<< (std::ostream& __stream, const Gamer& __bean) {
    __stream << "{";
    //ll1gen::field_ostream_begin

        __stream << "\"name\":\"" << ll1gen::json::detail::encodeJsonString(__bean._name) << "\"";


__stream << ",";
    __stream << "\"age\":" << __bean._age;


__stream << ",";
    if(__bean._weapon.get()) {
        __stream << "\"weapon\":" << *(__bean._weapon);
    } else {
        __stream << "\"weapon\": null";
    }


__stream << ",";
    __stream << "\"score\":" << __bean._score;


//ll1gen::field_ostream_end
    __stream << "}";
    return __stream;
}

std::istream& operator>> (std::istream& __stream, Gamer& __bean) {
    char __startObjectMrk = ll1gen::json::detail::lookUpAndEat(__stream, "{n");
    if(__startObjectMrk == 'n') {
        ll1gen::json::detail::lookUpTokenRemainder(__stream, __startObjectMrk, "null");
        return __stream;
    }
    for(unsigned int __i = 0; __i < 4; ++__i) {
        ll1gen::json::detail::lookUpAndEat(__stream, "\"");
        std::string __propertyName = ll1gen::json::detail::lookUp(__stream, "\"");
        ll1gen::json::detail::lookUpAndEat(__stream, ":");

        //ll1gen::field_istream_begin

            if(__propertyName == "name") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._name)) {
            throw new std::runtime_error("JSON: null not supported for field name (string). Check definition.");
        }
    }

else
    if(__propertyName == "age") {
        if(!ll1gen::json::detail::lookUpNull(__stream)) {
            __stream >> __bean._age;
        } else {
            throw std::runtime_error("JSON: null not supported for field age. Check definition");
        }
    }

else
    if(__propertyName == "weapon") {
        __bean._weapon = std::make_shared<Weapon>();
        if(!ll1gen::json::detail::lookUpNull(__stream)) {
            __stream >> *(__bean._weapon);
        } else {
            __bean._weapon.reset();
        }
    }

else
    if(__propertyName == "score") {
        if(!ll1gen::json::detail::lookUpNull(__stream)) {
            __stream >> __bean._score;
        } else {
            throw std::runtime_error("JSON: null not supported for field score. Check definition");
        }
    }

//ll1gen::field_istream_end

        if('}' == ll1gen::json::detail::lookUpAndEat(__stream, "},")) {
            break;
        }
    }
    return __stream;
}

} } 

#endif
